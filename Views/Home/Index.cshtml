@{
ViewData["Title"] = "Study Tracker";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
<div class="card">
    <h1>📚 Study Tracker</h1>
    <div class="pulse-line"></div>
    <p class="subtitle">Stay motivated & keep your learning pulse strong 💙</p>

    <label for="start">Start Time</label>
    <input type="time" id="start">

    <label for="end">End Time</label>
    <input type="time" id="end">

    <button onclick="submitStudy()">Log Study Session</button>

    <div class="result" id="result"></div>
    <div class="progress-container">
        <div class="progress-bar" id="progressBar"></div>
    </div>
    <audio id="audioPlayer" controls></audio>
</div>

<script>
    async function submitStudy() {
        const start = document.getElementById('start').value;
        const end = document.getElementById('end').value;
        const resultDiv = document.getElementById('result');
        const audioPlayer = document.getElementById('audioPlayer');
        const progressBar = document.getElementById('progressBar');

        resultDiv.innerText = "";

        if (!start || !end) {
            resultDiv.innerText = "⚠️ Please enter both start and end times.";
            return;
        }

        const startTime = new Date(`1970-01-01T${start}:00`);
        const endTime = new Date(`1970-01-01T${end}:00`);
        let hours = (endTime - startTime) / (1000 * 60 * 60);
        if (hours < 0) hours += 24;

        resultDiv.innerText = `✅ You studied for ${hours.toFixed(2)} hours.`;

        let progress = Math.min((hours / 8) * 100, 100);
        progressBar.style.width = progress + "%";

        try {
            const logResponse = await fetch("http://localhost:5078/api/studylogs", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    Date: new Date().toISOString(),
                    StartTime: startTime,
                    EndTime: endTime,
                    Hours: hours
                })
            });

            if (!logResponse.ok) {
                const errorText = await logResponse.text();
                console.error("Study log API error:", errorText);
                resultDiv.innerText += " ❌ Error saving study log.";
                return;
            }
        } catch (err) {
            console.error("Fetch error:", err);
            resultDiv.innerText += " ❌ Error saving study log.";
            return;
        }

        let category;
        if (hours < 2) category = 0;
        else if (hours <= 5) category = 1;
        else category = 2;

        try {
            const audioResponse = await fetch(`http://localhost:5078/api/audiomessages/random/${category}`);
            if (!audioResponse.ok) {
                resultDiv.innerText += " (no audio available 🎵)";
                return;
            }

            const audio = await audioResponse.json();
            console.log("Audio fetched:", audio);

            audioPlayer.src = `http://localhost:5078${audio.filePath}`;
            audioPlayer.load();

            const playPromise = audioPlayer.play();
            if (playPromise !== undefined) {
                playPromise.catch(err => console.log("Audio play error:", err));
            }
        } catch (err) {
            console.error("Audio fetch/play error:", err);
            resultDiv.innerText += " (error playing audio 🎵)";
        }
    }
</script>
</body>
</html>
